name: macOS tests (meson)

on:
  push:
    branches:
      - maintenance/**
  pull_request:
    branches:
      - main
      - maintenance/**

permissions:
   contents: read  # to fetch code (actions/checkout)

env:
  INSTALLDIR: "build-install"
  CCACHE_DIR: "${{ github.workspace }}/.ccache"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test_meson_accelerate:
    name: Meson build (Accelerate)
    runs-on: macos-14
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4.1.1
      with:
        submodules: recursive
    
    - name: Check SDK version
      run : |
        xcrun -sdk macosx --show-sdk-version

    # - name: Install Ccache
    #   run: |
    #     brew install ccache

    # - name:  Prepare compiler cache
    #   id:    prep-ccache
    #   shell: bash -l {0}
    #   run: |
    #     mkdir -p "${CCACHE_DIR}"
    #     echo "dir=$CCACHE_DIR" >> $GITHUB_OUTPUT
    #     NOW=$(date -u +"%F-%T")
    #     echo "timestamp=${NOW}" >> $GITHUB_OUTPUT

    # - name: Setup compiler cache
    #   uses:  actions/cache@v3
    #   id:    cache-ccache
    #   # Reference: https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
    #   # NOTE: The caching strategy is modeled in a way that it will always have
    #   # a unique cache key for each workflow run (even if the same workflow is
    #   # run multiple times). The restore keys are not unique and for a partial
    #   # match, they will return the most recently created cache entry,
    #   # according to the GitHub Action Docs.
    #   with:
    #     path: ${{ steps.prep-ccache.outputs.dir }}
    #     key:  ${{ github.workflow }}-${{ matrix.python-version }}-ccache-macos-${{ steps.prep-ccache.outputs.timestamp }}
    #     # This evaluates to `macOS Tests-3.10-ccache-macos-` which is not
    #     # unique. As the CI matrix is expanded, this will need to be updated to
    #     # be unique so that the cache is not restored from a different job altogether.
    #     restore-keys: |
    #       ${{ github.workflow }}-${{ matrix.python-version }}-ccache-macos-

    # - name: Setup Conda
    #   uses: conda-incubator/setup-miniconda@v2
    #   with:
    #     python-version: ${{ matrix.python-version }}
    #     channels: conda-forge
    #     channel-priority: true
    #     activate-environment: scipy-dev
    #     use-only-tar-bz2: false
    #     miniforge-variant: Mambaforge
    #     miniforge-version: latest
    #     use-mamba: true

    # - name: Get Date
    #   id: get-date
    #   run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT
    #   shell: bash

    # - name: Cache conda
    #   uses: actions/cache@v3
    #   env:
    #     # Increase this value to reset cache if environment.yml has not changed
    #     CACHE_NUMBER: 1
    #   with:
    #     path: ${{ env.CONDA }}/envs/scipy-dev
    #     key:
    #       ${{ runner.os }}--${{ steps.get-date.outputs.today }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
    #   id: envcache

    # - name: Update Conda Environment
    #   run: mamba env update -n scipy-dev -f environment.yml
    #   if: steps.envcache.outputs.cache-hit != 'true'

    # - name: Build and Install SciPy
    #   shell: bash -l {0}
    #   run: |
    #     conda activate scipy-dev

    #     # optional test dependencies
    #     mamba install scikit-umfpack scikit-sparse
        
    #     # Accelerate requires SDK >= 13.3
    #     export MACOSX_DEPLOYMENT_TARGET=13.3
    #     export MACOSX_SDK_VERSION=13.3
    #     CC="ccache $CC" python dev.py build -C-Dblas=accelerate

    # - name: Test SciPy
    #   shell: bash -l {0}
    #   run: |
    #     conda activate scipy-dev
    #     python dev.py -n test -j2

    # - name: Ccache statistics
    #   shell: bash -l {0}
    #   run: |
    #     ccache -s
